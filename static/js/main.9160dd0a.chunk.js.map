{"version":3,"sources":["logo.svg","Todo.js","App.js","reportWebVitals.js","index.js"],"names":["todoList","id","completed","description","TodoList","props","completeItem","itemId","console","log","setState","prevState","prevList","itemIndex","findIndex","item","handleKeyPress","event","key","addTodoItem","prevValue","state","inputRef","current","value","curId","React","createRef","checkRef","filterRef","length","filtered","this","filter","map","ref","type","onChange","defaultChecked","style","textDecoration","undefined","prev","padding","onKeyPress","onClick","Component","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"yMAAe,I,sDCCXA,EAAW,CACb,CACEC,GAAI,EACJC,WAAW,EACXC,YAAa,6CAEf,CACEF,GAAI,EACJC,WAAW,EACXC,YAAa,iCAIIC,E,kDACnB,WAAYC,GAAQ,IAAD,uBACjB,cAAMA,IAaRC,aAAe,SAACC,GACdC,QAAQC,IAAI,iBACZ,EAAKC,UAAS,SAACC,GACb,IAAIC,EAAWD,EAAUX,SACrBa,EAAYD,EAASE,WAAU,SAACC,GAAD,OAAUA,EAAKd,IAAMM,KAMxD,OALAC,QAAQC,IAAIG,EAASC,GAAWX,WAChCU,EAASC,GAAT,2BACKD,EAASC,IADd,IAEEX,WAAYU,EAASC,GAAWX,YAE3B,CAAEF,SAAS,YAAKY,QAxBR,EA2BnBI,eAAiB,SAACC,GAChBT,QAAQC,IAAI,WACZD,QAAQC,IAAIQ,EAAMC,KACD,SAAbD,EAAMC,KACR,EAAKC,eA/BU,EAkCnBA,YAAc,WACZ,IAAIC,EAAY,EAAKC,MAAMC,SAASC,QAAQC,MAC5C,EAAKd,UAAS,SAACC,GAAD,MAAgB,CAC5BX,SAAS,GAAD,mBACHW,EAAUX,UADP,CAEN,CAAEE,WAAW,EAAOC,YAAaiB,EAAWnB,GAAIU,EAAUc,SAE5DA,MAAOd,EAAUc,MAAQ,MAE3B,EAAKJ,MAAMC,SAASC,QAAQC,MAAQ,IAzCpC,IAAIF,EAAWI,IAAMC,YACjBC,EAAWF,IAAMC,YACjBE,EAAYH,IAAMC,YAJL,OAKjB,EAAKN,MAAQ,CACXrB,WACAyB,MAAOzB,EAAS8B,OAAS,EACzBR,WACAM,WACAC,YACAE,UAAU,GAXK,E,0CA6CnB,WAAU,IAAD,OACPvB,QAAQC,IAAI,YACZD,QAAQC,IAAI,YACZ,IAAIT,EAAWgC,KAAKX,MAAMrB,SAuB1B,OAtBIgC,KAAKX,MAAMU,WACb/B,EAAWA,EAASiC,QAAO,SAAClB,GAAD,OAAWA,EAAKb,cAE7CF,EAAWA,EAASkC,KAAI,SAACnB,GAAD,OACtB,8BACE,kCACE,uBACEoB,IAAK,EAAKd,MAAMO,SAChBQ,KAAK,WACLC,SAAU,kBAAM,EAAK/B,aAAaS,EAAKd,KACvCqC,eAAgBvB,EAAKb,YAEvB,sBACEqC,MACExB,EAAKb,UAAY,CAAEsC,eAAgB,qBAAmBC,EAF1D,SAKG1B,EAAKZ,kBAbFY,EAAKd,OAmBf,qCACE,mDACA,kCACE,uBACEkC,IAAKH,KAAKX,MAAMQ,UAChBO,KAAK,WACLC,SAAU,kBACR,EAAK3B,UAAS,SAACgC,GAAD,MAAW,CAAEX,UAAWW,EAAKX,cAE7CO,gBAAgB,IAPpB,4BAWA,uBACA,qBAAKC,MAAO,CAAEI,QAAS,OAAvB,SAAiC3C,IACjC,uBACE4C,WAAY,SAAC3B,GAAD,OAAW,EAAKD,eAAeC,IAC3CkB,IAAKH,KAAKX,MAAMC,WAElB,wBAAQuB,QAAS,kBAAM,EAAK1B,eAA5B,kC,GA5F8BO,IAAMoB,WCP7BC,MAJf,WACE,OAAO,cAAC,EAAD,KCQMC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.9160dd0a.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React from \"react\"\r\nlet todoList = [\r\n  {\r\n    id: 1,\r\n    completed: false,\r\n    description: \"Complete a demo of React and GitHub Pages\",\r\n  },\r\n  {\r\n    id: 2,\r\n    completed: true,\r\n    description: \"Demo a TODO list application\",\r\n  },\r\n]\r\n\r\nexport default class TodoList extends React.Component {\r\n  constructor(props) {\r\n    super(props)\r\n    let inputRef = React.createRef()\r\n    let checkRef = React.createRef()\r\n    let filterRef = React.createRef()\r\n    this.state = {\r\n      todoList,\r\n      curId: todoList.length + 1,\r\n      inputRef,\r\n      checkRef,\r\n      filterRef,\r\n      filtered: false,\r\n    }\r\n  }\r\n  completeItem = (itemId) => {\r\n    console.log(\"Complete item\")\r\n    this.setState((prevState) => {\r\n      let prevList = prevState.todoList\r\n      let itemIndex = prevList.findIndex((item) => item.id == itemId)\r\n      console.log(prevList[itemIndex].completed)\r\n      prevList[itemIndex] = {\r\n        ...prevList[itemIndex],\r\n        completed: !prevList[itemIndex].completed,\r\n      }\r\n      return { todoList: [...prevList] }\r\n    })\r\n  }\r\n  handleKeyPress = (event) => {\r\n    console.log(\"Pressed\")\r\n    console.log(event.key)\r\n    if (event.key == \"Enter\") {\r\n      this.addTodoItem()\r\n    }\r\n  }\r\n  addTodoItem = () => {\r\n    let prevValue = this.state.inputRef.current.value\r\n    this.setState((prevState) => ({\r\n      todoList: [\r\n        ...prevState.todoList,\r\n        { completed: false, description: prevValue, id: prevState.curId },\r\n      ],\r\n      curId: prevState.curId + 1,\r\n    }))\r\n    this.state.inputRef.current.value = \"\"\r\n  }\r\n  render() {\r\n    console.log(\"Rendered\")\r\n    console.log(\"Rendered\")\r\n    let todoList = this.state.todoList\r\n    if (this.state.filtered) {\r\n      todoList = todoList.filter((item) => !item.completed)\r\n    }\r\n    todoList = todoList.map((item) => (\r\n      <div key={item.id}>\r\n        <label>\r\n          <input\r\n            ref={this.state.checkRef}\r\n            type=\"checkbox\"\r\n            onChange={() => this.completeItem(item.id)}\r\n            defaultChecked={item.completed}\r\n          ></input>\r\n          <span\r\n            style={\r\n              item.completed ? { textDecoration: \"line-through\" } : undefined\r\n            }\r\n          >\r\n            {item.description}\r\n          </span>\r\n        </label>\r\n      </div>\r\n    ))\r\n    return (\r\n      <>\r\n        <h1>What to do today?</h1>\r\n        <label>\r\n          <input\r\n            ref={this.state.filterRef}\r\n            type=\"checkbox\"\r\n            onChange={() =>\r\n              this.setState((prev) => ({ filtered: !prev.filtered }))\r\n            }\r\n            defaultChecked={false}\r\n          ></input>\r\n          Filter completed items\r\n        </label>\r\n        <hr></hr>\r\n        <div style={{ padding: \"5px\" }}>{todoList}</div>\r\n        <input\r\n          onKeyPress={(event) => this.handleKeyPress(event)}\r\n          ref={this.state.inputRef}\r\n        ></input>\r\n        <button onClick={() => this.addTodoItem()}>Add TODO Item</button>\r\n      </>\r\n    )\r\n  }\r\n}\r\n","import logo from \"./logo.svg\"\nimport \"./App.css\"\nimport Todo from \"./Todo.js\"\nfunction App() {\n  return <Todo></Todo>\n}\n\nexport default App\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}